# Arquivo: app.py

import streamlit as st
import pandas as pd
# ALTERADO: Importa a nova fun√ß√£o
from gerar_word import criar_documentos_por_tema
from datetime import datetime
import re
import unicodedata

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gerador de Relat√≥rios",
    page_icon="üé®",
    layout="centered"
)

# --- Fun√ß√£o para limpar o nome do arquivo ---
def limpar_nome_arquivo(nome):
    """Remove acentos, espa√ßos e caracteres especiais para criar um nome de arquivo seguro."""
    # Normaliza para remover acentos
    s = ''.join(c for c in unicodedata.normalize('NFD', nome) if unicodedata.category(c) != 'Mn')
    # Remove caracteres especiais, mant√©m letras, n√∫meros e underscores
    s = re.sub(r'[^\w\s-]', '', s).strip()
    # Substitui espa√ßos e h√≠fens por underscore
    s = re.sub(r'[-\s]+', '_', s)
    return s.lower()

# --- Interface da Aplica√ß√£o ---
st.title("üìù Relat√≥rio por Objetivo Estratr√©gico ")
st.write(
    "Fa√ßa o upload da sua planilha Excel de iniciativas para gerar "
    "automaticamente os relat√≥rios em formato Word (.docx), separados por tema."
)

# --- Widget de Upload de Arquivo ---
uploaded_file = st.file_uploader(
    "Escolha o arquivo Excel (.xlsx)",
    type=['xlsx']
)

# --- L√≥gica Principal (ALTERADA) ---
if uploaded_file is not None:
    try:
        with st.spinner("Lendo a planilha e gerando os documentos... Aguarde."):
            df = pd.read_excel(uploaded_file)

            # Chama a nova fun√ß√£o que retorna um dicion√°rio de documentos
            documentos_por_tema = criar_documentos_por_tema(df)

        if not documentos_por_tema:
            st.warning("Nenhum tema (Objetivo Estrat√©gico) encontrado na planilha para gerar relat√≥rios.")
        else:
            st.success(f"‚úÖ {len(documentos_por_tema)} documento(s) gerado(s) com sucesso!")
            st.markdown("---")
            
            # Itera sobre o dicion√°rio para criar um bot√£o de download para cada tema
            for tema, doc_io in documentos_por_tema.items():
                
                # Gera um nome de arquivo limpo e din√¢mico
                tema_limpo = limpar_nome_arquivo(tema)
                nome_arquivo_final = f"relatorio_{tema_limpo}_{datetime.now().strftime('%Y%m%d')}.docx"
                
                # Cria um container ou coluna para cada bot√£o para melhor espa√ßamento
                with st.container():
                    st.subheader(f"Objetivo Estrat√©gico: {tema}")
                    st.download_button(
                        label=f"üì• Baixar Relat√≥rio: {tema}",
                        data=doc_io,
                        file_name=nome_arquivo_final,
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        # Adiciona uma chave √∫nica para cada bot√£o, importante para o Streamlit
                        key=f"download_{tema_limpo}"
                    )
                    st.markdown("---")

    except Exception as e:
        st.error(f"Ocorreu um erro ao processar o arquivo: {e}")
        st.warning(
            "Verifique se as colunas da sua planilha Excel correspondem ao "
            "modelo esperado (√ìrg√£o, Iniciativa, Objetivo Estrat√©gico, etc.)."
        )